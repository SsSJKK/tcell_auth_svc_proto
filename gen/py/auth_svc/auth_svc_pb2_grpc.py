# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from auth_svc import auth_svc_pb2 as auth__svc_dot_auth__svc__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignUp = channel.unary_unary(
                '/auth.Auth/SignUp',
                request_serializer=auth__svc_dot_auth__svc__pb2.SignUpRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.SignUpResponse.FromString,
                )
        self.SignIn = channel.unary_unary(
                '/auth.Auth/SignIn',
                request_serializer=auth__svc_dot_auth__svc__pb2.SignInRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.SignInResponse.FromString,
                )
        self.RefreshToken = channel.unary_unary(
                '/auth.Auth/RefreshToken',
                request_serializer=auth__svc_dot_auth__svc__pb2.RefreshTokenRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.RefreshTokenResponse.FromString,
                )
        self.CheckToken = channel.unary_unary(
                '/auth.Auth/CheckToken',
                request_serializer=auth__svc_dot_auth__svc__pb2.CheckTokenRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.CheckTokenResponse.FromString,
                )
        self.CheckPermisson = channel.unary_unary(
                '/auth.Auth/CheckPermisson',
                request_serializer=auth__svc_dot_auth__svc__pb2.CheckPermissonRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.CheckPermissonResponse.FromString,
                )
        self.TakePin = channel.unary_unary(
                '/auth.Auth/TakePin',
                request_serializer=auth__svc_dot_auth__svc__pb2.TakePinRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.TakePinResponse.FromString,
                )
        self.SignOut = channel.unary_unary(
                '/auth.Auth/SignOut',
                request_serializer=auth__svc_dot_auth__svc__pb2.SignOutRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.SignOutResponse.FromString,
                )
        self.HasPassword = channel.unary_unary(
                '/auth.Auth/HasPassword',
                request_serializer=auth__svc_dot_auth__svc__pb2.HasPasswordRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.HasPasswordResponse.FromString,
                )
        self.ResetPassword = channel.unary_unary(
                '/auth.Auth/ResetPassword',
                request_serializer=auth__svc_dot_auth__svc__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.ResetPasswordResponse.FromString,
                )
        self.SetPassword = channel.unary_unary(
                '/auth.Auth/SetPassword',
                request_serializer=auth__svc_dot_auth__svc__pb2.SetPasswordRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.SetPasswordResponse.FromString,
                )
        self.ChangePassword = channel.unary_unary(
                '/auth.Auth/ChangePassword',
                request_serializer=auth__svc_dot_auth__svc__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.ChangePasswordResponse.FromString,
                )
        self.CheckVersion = channel.unary_unary(
                '/auth.Auth/CheckVersion',
                request_serializer=auth__svc_dot_auth__svc__pb2.CheckVersionRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.CheckVersionResponse.FromString,
                )
        self.CustomerInfo = channel.unary_unary(
                '/auth.Auth/CustomerInfo',
                request_serializer=auth__svc_dot_auth__svc__pb2.CustomerInfoRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.CustomerInfoResponse.FromString,
                )
        self.GetAction = channel.unary_unary(
                '/auth.Auth/GetAction',
                request_serializer=auth__svc_dot_auth__svc__pb2.GetActionRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.GetActionResponse.FromString,
                )
        self.AddPermissionCustomer = channel.unary_unary(
                '/auth.Auth/AddPermissionCustomer',
                request_serializer=auth__svc_dot_auth__svc__pb2.AddPermissionCustomerRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.AddPermissionCustomerResponse.FromString,
                )
        self.AddPermissionGroup = channel.unary_unary(
                '/auth.Auth/AddPermissionGroup',
                request_serializer=auth__svc_dot_auth__svc__pb2.AddPermissionGroupRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.AddPermissionGroupResponse.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/auth.Auth/GetGroup',
                request_serializer=auth__svc_dot_auth__svc__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.GetGroupResponse.FromString,
                )
        self.AddGroup = channel.unary_unary(
                '/auth.Auth/AddGroup',
                request_serializer=auth__svc_dot_auth__svc__pb2.AddGroupRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.AddGroupResponse.FromString,
                )
        self.AddCustomerToGroup = channel.unary_unary(
                '/auth.Auth/AddCustomerToGroup',
                request_serializer=auth__svc_dot_auth__svc__pb2.AddCustomerToGroupRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.AddCustomerToGroupResponse.FromString,
                )
        self.CheckTOTP = channel.unary_unary(
                '/auth.Auth/CheckTOTP',
                request_serializer=auth__svc_dot_auth__svc__pb2.CheckTOTPRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.CheckTOTPResponse.FromString,
                )
        self.TOTPLinkAccountTmp = channel.unary_unary(
                '/auth.Auth/TOTPLinkAccountTmp',
                request_serializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountTmpRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountTmpResponse.FromString,
                )
        self.TOTPLinkAccount = channel.unary_unary(
                '/auth.Auth/TOTPLinkAccount',
                request_serializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountResponse.FromString,
                )
        self.TOTPUnlinkAccount = channel.unary_unary(
                '/auth.Auth/TOTPUnlinkAccount',
                request_serializer=auth__svc_dot_auth__svc__pb2.TOTPUnlinkAccountRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.TOTPUnlinkAccountResponse.FromString,
                )
        self.TOTPHasLinkedAccount = channel.unary_unary(
                '/auth.Auth/TOTPHasLinkedAccount',
                request_serializer=auth__svc_dot_auth__svc__pb2.TOTPHasLinkedAccountRequest.SerializeToString,
                response_deserializer=auth__svc_dot_auth__svc__pb2.TOTPHasLinkedAccountResponse.FromString,
                )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SignUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPermisson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakePin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomerInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPermissionCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPermissionGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCustomerToGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TOTPLinkAccountTmp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TOTPLinkAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TOTPUnlinkAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TOTPHasLinkedAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignUp': grpc.unary_unary_rpc_method_handler(
                    servicer.SignUp,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.SignUpRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.SignUpResponse.SerializeToString,
            ),
            'SignIn': grpc.unary_unary_rpc_method_handler(
                    servicer.SignIn,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.SignInRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.SignInResponse.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.RefreshTokenRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.RefreshTokenResponse.SerializeToString,
            ),
            'CheckToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckToken,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.CheckTokenRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.CheckTokenResponse.SerializeToString,
            ),
            'CheckPermisson': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPermisson,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.CheckPermissonRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.CheckPermissonResponse.SerializeToString,
            ),
            'TakePin': grpc.unary_unary_rpc_method_handler(
                    servicer.TakePin,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.TakePinRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.TakePinResponse.SerializeToString,
            ),
            'SignOut': grpc.unary_unary_rpc_method_handler(
                    servicer.SignOut,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.SignOutRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.SignOutResponse.SerializeToString,
            ),
            'HasPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.HasPassword,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.HasPasswordRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.HasPasswordResponse.SerializeToString,
            ),
            'ResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPassword,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.ResetPasswordRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.ResetPasswordResponse.SerializeToString,
            ),
            'SetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPassword,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.SetPasswordRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.SetPasswordResponse.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.ChangePasswordRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.ChangePasswordResponse.SerializeToString,
            ),
            'CheckVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckVersion,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.CheckVersionRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.CheckVersionResponse.SerializeToString,
            ),
            'CustomerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomerInfo,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.CustomerInfoRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.CustomerInfoResponse.SerializeToString,
            ),
            'GetAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAction,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.GetActionRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.GetActionResponse.SerializeToString,
            ),
            'AddPermissionCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPermissionCustomer,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.AddPermissionCustomerRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.AddPermissionCustomerResponse.SerializeToString,
            ),
            'AddPermissionGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPermissionGroup,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.AddPermissionGroupRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.AddPermissionGroupResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.GetGroupRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.GetGroupResponse.SerializeToString,
            ),
            'AddGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGroup,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.AddGroupRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.AddGroupResponse.SerializeToString,
            ),
            'AddCustomerToGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCustomerToGroup,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.AddCustomerToGroupRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.AddCustomerToGroupResponse.SerializeToString,
            ),
            'CheckTOTP': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTOTP,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.CheckTOTPRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.CheckTOTPResponse.SerializeToString,
            ),
            'TOTPLinkAccountTmp': grpc.unary_unary_rpc_method_handler(
                    servicer.TOTPLinkAccountTmp,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountTmpRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountTmpResponse.SerializeToString,
            ),
            'TOTPLinkAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.TOTPLinkAccount,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.TOTPLinkAccountResponse.SerializeToString,
            ),
            'TOTPUnlinkAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.TOTPUnlinkAccount,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.TOTPUnlinkAccountRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.TOTPUnlinkAccountResponse.SerializeToString,
            ),
            'TOTPHasLinkedAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.TOTPHasLinkedAccount,
                    request_deserializer=auth__svc_dot_auth__svc__pb2.TOTPHasLinkedAccountRequest.FromString,
                    response_serializer=auth__svc_dot_auth__svc__pb2.TOTPHasLinkedAccountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SignUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/SignUp',
            auth__svc_dot_auth__svc__pb2.SignUpRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.SignUpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/SignIn',
            auth__svc_dot_auth__svc__pb2.SignInRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.SignInResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/RefreshToken',
            auth__svc_dot_auth__svc__pb2.RefreshTokenRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.RefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CheckToken',
            auth__svc_dot_auth__svc__pb2.CheckTokenRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.CheckTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckPermisson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CheckPermisson',
            auth__svc_dot_auth__svc__pb2.CheckPermissonRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.CheckPermissonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TakePin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/TakePin',
            auth__svc_dot_auth__svc__pb2.TakePinRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.TakePinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/SignOut',
            auth__svc_dot_auth__svc__pb2.SignOutRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.SignOutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/HasPassword',
            auth__svc_dot_auth__svc__pb2.HasPasswordRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.HasPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/ResetPassword',
            auth__svc_dot_auth__svc__pb2.ResetPasswordRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.ResetPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/SetPassword',
            auth__svc_dot_auth__svc__pb2.SetPasswordRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.SetPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/ChangePassword',
            auth__svc_dot_auth__svc__pb2.ChangePasswordRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.ChangePasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CheckVersion',
            auth__svc_dot_auth__svc__pb2.CheckVersionRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.CheckVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CustomerInfo',
            auth__svc_dot_auth__svc__pb2.CustomerInfoRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.CustomerInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/GetAction',
            auth__svc_dot_auth__svc__pb2.GetActionRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.GetActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPermissionCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/AddPermissionCustomer',
            auth__svc_dot_auth__svc__pb2.AddPermissionCustomerRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.AddPermissionCustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPermissionGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/AddPermissionGroup',
            auth__svc_dot_auth__svc__pb2.AddPermissionGroupRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.AddPermissionGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/GetGroup',
            auth__svc_dot_auth__svc__pb2.GetGroupRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.GetGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/AddGroup',
            auth__svc_dot_auth__svc__pb2.AddGroupRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.AddGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddCustomerToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/AddCustomerToGroup',
            auth__svc_dot_auth__svc__pb2.AddCustomerToGroupRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.AddCustomerToGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckTOTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CheckTOTP',
            auth__svc_dot_auth__svc__pb2.CheckTOTPRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.CheckTOTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TOTPLinkAccountTmp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/TOTPLinkAccountTmp',
            auth__svc_dot_auth__svc__pb2.TOTPLinkAccountTmpRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.TOTPLinkAccountTmpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TOTPLinkAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/TOTPLinkAccount',
            auth__svc_dot_auth__svc__pb2.TOTPLinkAccountRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.TOTPLinkAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TOTPUnlinkAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/TOTPUnlinkAccount',
            auth__svc_dot_auth__svc__pb2.TOTPUnlinkAccountRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.TOTPUnlinkAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TOTPHasLinkedAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/TOTPHasLinkedAccount',
            auth__svc_dot_auth__svc__pb2.TOTPHasLinkedAccountRequest.SerializeToString,
            auth__svc_dot_auth__svc__pb2.TOTPHasLinkedAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
